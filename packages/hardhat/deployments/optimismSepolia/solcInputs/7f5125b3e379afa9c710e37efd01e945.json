{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "contracts/adwumapa.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\n\r\ncontract Adwumapa is ReentrancyGuard {\r\n\r\n    struct Milestone {\r\n        uint256 id;\r\n        uint256 amount;\r\n        string description;\r\n        bool isCompleted;\r\n    }\r\n\r\n    struct Project {\r\n        uint256 amount;\r\n        string title;\r\n        string description;\r\n        Milestone[] milestones;\r\n        uint256 startDate;\r\n        uint256 endDate;\r\n        string revisionPolicy;\r\n    }\r\n\r\n    mapping(address => Project) public projects; // Mapping to store projects by client address\r\n\r\n    event PaymentProcessed(address indexed recipient, uint256 amount);\r\n    event Deposit(address indexed sender, uint256 amount);\r\n    event PaymentReleased(address indexed client, address indexed freelancer, uint256 amount);\r\n    event ProjectCompleted(address indexed client, address indexed freelancer, uint256 amount);\r\n    event MilestoneCompleted(address indexed client, address indexed freelancer, uint256 milestoneIndex, uint256 amount);\r\n    event ProjectCreated(address indexed client, uint256 amount, string title, string description, Milestone[] milestones, uint256 startDate, uint256 endDate, string revisionPolicy);\r\n    event MilestoneCreated(address indexed client, uint256 milestoneId, uint256 amount, string description);\r\n\r\n    mapping(address => uint256) public clientBalances;\r\n    mapping(address => address) public clientFreelancer;\r\n    mapping(address => uint256[]) public clientMilestones;\r\n\r\n    // Function to deposit Ether into the contract\r\n    function deposit(address freelancer) external payable nonReentrant {\r\n        require(msg.value > 0, \"Amount must be greater than 0\");\r\n        require(freelancer != address(0), \"Invalid freelancer address\");\r\n        clientBalances[msg.sender] += msg.value;\r\n        clientFreelancer[msg.sender] = freelancer;\r\n        emit Deposit(msg.sender, msg.value);\r\n    }\r\n\r\n    // Function to mark project as complete and release payment\r\n    function completeProject() external nonReentrant {\r\n        address freelancer = clientFreelancer[msg.sender];\r\n        uint256 amount = clientBalances[msg.sender];\r\n\r\n        require(freelancer != address(0), \"No freelancer assigned\");\r\n        require(amount > 0, \"No funds to release\");\r\n\r\n        clientBalances[msg.sender] = 0;\r\n        clientFreelancer[msg.sender] = address(0);\r\n        payable(freelancer).transfer(amount);\r\n        emit ProjectCompleted(msg.sender, freelancer, amount);\r\n        emit PaymentReleased(msg.sender, freelancer, amount); }\r\n\r\n    // Function to release payment when client is satisfied\r\n    function releasePayment(address freelancer, uint256 amount) external nonReentrant {\r\n        require(freelancer != address(0), \"Invalid freelancer address\");\r\n        require(amount > 0, \"Amount must be greater than 0\");\r\n        require(clientBalances[msg.sender] >= amount, \"Insufficient balance\");\r\n\r\n        clientBalances[msg.sender] -= amount;\r\n        payable(freelancer).transfer(amount);\r\n        emit PaymentReleased(msg.sender, freelancer, amount);\r\n    }\r\n\r\n    // Function to mark milestone as complete and release payment\r\n    function completeMilestone(uint256 milestoneIndex) external nonReentrant {\r\n        address freelancer = clientFreelancer[msg.sender];\r\n        uint256 amount = clientMilestones[msg.sender][milestoneIndex];\r\n\r\n        require(freelancer != address(0), \"No freelancer assigned\");\r\n        require(milestoneIndex < clientMilestones[msg.sender].length, \"Invalid milestone index\");\r\n        require(amount > 0, \"No funds to release\");\r\n\r\n        clientMilestones[msg.sender][milestoneIndex] = 0;\r\n        payable(freelancer).transfer(amount);\r\n        emit MilestoneCompleted(msg.sender, freelancer, milestoneIndex, amount);\r\n    }\r\n\r\n    function createProject(\r\n        uint256 amount,\r\n        string memory title,\r\n        string memory description,\r\n        uint256 startDate,\r\n        uint256 endDate,\r\n        string memory revisionPolicy\r\n    ) external payable nonReentrant {\r\n        require(amount > 0, \"Amount must be greater than 0\");\r\n        \r\n        Project storage newProject = projects[msg.sender]; // Create a new project for the client\r\n        newProject.amount = amount;\r\n        newProject.title = title;\r\n        newProject.description = description;\r\n        newProject.startDate = startDate;\r\n        newProject.endDate = endDate;\r\n        newProject.revisionPolicy = revisionPolicy;\r\n\r\n        clientBalances[msg.sender] += msg.value;\r\n        emit ProjectCreated(msg.sender, amount, title, description, newProject.milestones, startDate, endDate, revisionPolicy);\r\n    }\r\n\r\n    // Function to create a milestone for an existing project\r\n    function createMilestone(uint256 amount, string memory description) external {\r\n        require(amount > 0, \"Amount must be greater than 0\");\r\n        require(clientFreelancer[msg.sender] != address(0), \"No freelancer assigned\");\r\n        require(projects[msg.sender].amount > 0, \"No project found for this client\"); // Ensure a project exists\r\n\r\n        // Ensure the project exists and is associated with the client\r\n        Project storage project = projects[msg.sender];\r\n        require(project.amount > 0, \"No project found for this client\"); // Ensure a project exists\r\n\r\n        // Check that the total milestone amounts do not exceed the project amount\r\n        uint256 totalMilestoneAmount = 0;\r\n        for (uint256 i = 0; i < project.milestones.length; i++) {\r\n            totalMilestoneAmount += project.milestones[i].amount;\r\n        }\r\n        require(totalMilestoneAmount + amount <= project.amount, \"Total milestone amounts exceed project amount\");\r\n\r\n        Milestone memory newMilestone = Milestone({\r\n            id: project.milestones.length,\r\n            amount: amount,\r\n            description: description,\r\n            isCompleted: false\r\n        });\r\n\r\n        project.milestones.push(newMilestone); \r\n        emit MilestoneCreated(msg.sender, newMilestone.id, amount, description);\r\n    }\r\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}